<!--下拉刷新视图-->
<template>
    <div>
        <scroller :style="listStyle"
                  :loadmoreoffset="loadmoreoffset"
                  @scroll="viewScroll"
                  @loadmore="loadmore">
                  show-scrollbar="false">
            <refresh class="flex_center" style="flex-direction: row;width: 750px;"
                     @refresh="viewRefresh"
                     @pullingdown="viewOnPullingDown"
                     :display="showRefresh ? 'show' : 'hide'">
                <div class="flex_row flex_center" style="flex: 1;">
                    <image :src="images[currentAnimationFrame]" :style="imageStyle"></image>
                    <div v-if="refreshTitle.length>0 && pullDownTipText.length>0 ">
                        <text class="loading_text" v-if="refreshTitle.length>0">{{refreshTitle}}</text>
                        <text class="loading_text" v-if="tipStatus===false">{{pullDownTipText}}</text>
                        <text class="loading_text" v-if="tipStatus">{{refreshTipText}}</text>
                    </div>
                </div>
            </refresh>
            <slot></slot>
        </scroller>
        <slot name="drop-no-scroller"></slot>
    </div>
</template>
<script>
    import tabbarPage from '../mixins/TabbarPage';
    import {timer} from "../utils/ExportWeexModel";
    import weexUtils from "../utils/WeexUtils";

    export default {
        mixins: [tabbarPage],
        props: {
            imageStyle: {
                default: {
                    width: "224px",
                    height: "126px"
                }
            },
            images: {default: []},  //刷新动画图片列表
            refreshTitle: {default: ""},
            pullDownTipText: {default: "松开后刷新"},
            refreshTipText: {default: "正在加载中"},
            frameTimes: {default: 130},
            loadmoreoffset:{default:120}
        },
        data() {
            return {
                showRefresh: false,
                tipStatus: false,
                animationFrameHandler: null,
                currentAnimationFrame: 0, //当前下拉刷新动画的帧
            }
        },
        methods: {
            /**
             * 下拉刷新动画帧控制
             **/
            viewRefreshAnimation() {
                console.log("开始执行动画刷新!--> " + this.currentAnimationFrame);
                timer.setTimeout(this.animationFrameHandler, this.frameTimes);
            },
            viewOnPullingDown() {
                //开始动画
            },
            viewRefresh() {
                this.showRefresh = true;
                this.tipStatus = true;
                this.viewRefreshAnimation(true);
                this.$emit("refreshPage", () => {
                    timer.setTimeout(() => {
                        //结束动画
                        this.viewRefreshAnimation(false);
                        this.showRefresh = false;
                        timer.setTimeout(() => {
                            this.tipStatus=false;
                        }, 200);
                    }, 500);
                });
            },
            loadmore(){
                this.$emit("loadmore");
            },
            viewScroll(event) {
                //页面滚动时调用的方法
                this.$emit("pageScroller", event);
            }
        },
        created() {
            const imagesLength = this.images.length;
            this.animationFrameHandler = () => {
                console.log("this.currentAnimationFrame-->  " + this.currentAnimationFrame);
                if (this.currentAnimationFrame < imagesLength) {
                    this.currentAnimationFrame++;
                } else {
                    this.currentAnimationFrame = 0;
                }
                if (this.showRefresh) {
                    this.viewRefreshAnimation();
                }
            };

        }
    }
</script>
<style scoped>

    .flex_center {
        justify-content: center;
        align-items: center;
    }

    .flex_row {
        flex-direction: row;
    }

    .loading_text {
        font-size: 30px;
        color: #9c9c9c;
        text-align: center;
        padding-left: 10px;
    }
</style>